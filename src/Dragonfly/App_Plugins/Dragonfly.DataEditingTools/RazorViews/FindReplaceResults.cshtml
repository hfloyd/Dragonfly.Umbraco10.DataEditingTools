@inherits UmbracoViewPage<PageData<FindReplaceResultsSet>>
@{
	Layout = "_Master.cshtml";

	var status = Model.Status;
	var findReplaceResults = Model.DataModel;

	//Column Widths
	var col1Class = "col-sm-3";
	var col2Class = "col-sm-9";

	var pvFormFindReplace = ViewHelpers.GetViewsPath() + "Partials/FormFindReplace.cshtml";

	var allOriginalHighlights = findReplaceResults.Results.SelectMany(n => n.FindStrings).ToList();
	var allNewHighlights = findReplaceResults.Results.SelectMany(n => n.FindStrings).ToList();
	allNewHighlights.AddRange(findReplaceResults.Results.SelectMany(n => n.ReplaceStrings));

	var customMigClass = findReplaceResults.FormInputs.CustomTransformationClass;
	var typeDescription = !string.IsNullOrEmpty(customMigClass) ? findReplaceResults.Type.ToString() + " : " + customMigClass : findReplaceResults.Type.ToString();
}

<h3>Current Options</h3>
<div class="card card-default">
	<h5 class="card-header">Criteria</h5>
	<div class="card-body">
		<dl class="row">
			<dt class="@col1Class">Type</dt>
			<dd class="@col2Class">@typeDescription</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">"Find" Phrase</dt>
			<dd class="@col2Class">@findReplaceResults.FormInputs.Find</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">"Replace" Phrase</dt>
			<dd class="@col2Class">@findReplaceResults.FormInputs.Replace</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Preview Only?</dt>
			<dd class="@col2Class">@findReplaceResults.FormInputs.PreviewOnly</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Property Aliases</dt>
			<dd class="@col2Class">
				<ul>
					@foreach (var alias in findReplaceResults.PropertyAliases)
					{
						<li>@alias</li>
					}
				</ul>
			</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Number of Affected Nodes</dt>
			<dd class="@col2Class">@findReplaceResults.Results.Count()</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Content Has Been Updated?</dt>
			<dd class="@col2Class">@findReplaceResults.DataUpdatedAndSaved</dd>
		</dl>
	</div>
</div>

@if (!findReplaceResults.DataUpdatedAndSaved)
{
	<h3>PREVIEW of Content Nodes Changes</h3>
}
else
{
	<h3>Content Nodes UPDATED</h3>
}

@if (findReplaceResults.Results.Any())
{
	var showStatusCols = findReplaceResults.Type == Enums.FindReplaceType.IntsToUdis | findReplaceResults.Type == Enums.FindReplaceType.CustomTransformation;
	var showFRStringsCols = findReplaceResults.Type == Enums.FindReplaceType.IntsToUdis;
	var counter = 0;
	<table id="umbracodata" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="max-width: 1600px !important;">
		<thead>
			<tr>
				<th>#</th>
				<th>Node Id</th>
				<th>Node Name</th>
				<th>Node Is Published</th>
				<th>Property Alias</th>
				<th>Match was Found?</th>
				<th>Original Property Value</th>
				<th>Updated Property Value</th>
				@if (showStatusCols)
				{
					<th>Status</th>
				}
				@if (showFRStringsCols)
				{
					<th>Individual 'Find/Replace' Strings</th>
				}
				<th>Original Length</th>
				<th>Updated Length</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var result in findReplaceResults.Results)
			{
				var node = result.ContentNode;
				var urlBackoffice = string.Format("/umbraco/#/content/content/edit/{0}", node.Id.ToString());

				counter++;
				var rowClass = result.ContentUpdated == true ? "table-success" : "";
				var origData = result.OriginalPropertyData != null ? ViewHelpers.Highlight(result.OriginalPropertyData.ToString(), allOriginalHighlights) : new HtmlString("");
				var newData = result.NewPropertyData != null ? ViewHelpers.Highlight(result.NewPropertyData.ToString(), allNewHighlights) : new HtmlString("");
				<tr class="@rowClass">
					<td>@counter</td>
					<td><a href="@urlBackoffice" target="_blank">@node.Id</a></td>
					<td>@node.Name</td>
					<td>@node.Published</td>
					<td>@result.PropertyAlias</td>
					<td>@result.MatchFound</td>
					<td>@origData</td>
					<td>@newData</td>
					@if (showStatusCols)
					{
						<td>@result.Status</td>
					}
					@if (showFRStringsCols)
					{
						<td>
							@for (int i = 0; i < result.FindStrings.Count - 1; i++)
							{
								<p><span class="alert-primary">@result.FindStrings[i]</span> <span class="alert-info">@result.ReplaceStrings[i]</span></p>
							}
						</td>
					}

					<td>@(result.OriginalPropertyData != null ? result.OriginalPropertyData.ToString().Length : 0)</td>
					<td>@(result.NewPropertyData != null ? result.NewPropertyData.ToString().Length : 0)</td>
				</tr>
			}

		</tbody>
	</table>
}
else
{
	<i style="color:red;">There is no data available currently.</i>
}

@await Html.PartialAsync(pvFormFindReplace, findReplaceResults.FormInputs)

@section FooterScripts {
	<script type="text/javascript">
		$(document).ready(function () {

			// Setup - add a text input to each footer cell
			$('#umbracodata tfoot th').each(function () {
				var title = $(this).text();
				$(this).html('<input type="text" placeholder="Search ' + title + '" />');
			});

			$('#umbracodata').DataTable({
				"lengthMenu": [[10, 25, 50, - 1], [10, 25, 50, "All"]]
			});

			// Apply the search
			table.columns().every(function () {
				var that = this;

				$('input', this.footer()).on('keyup change',
					function () {
						if (that.search() !== this.value) {
							that
								.search(this.value)
								.draw();
						}
					});
			});
		});
	</script>
}