@inherits UmbracoViewPage<PageData<StatusMessage>>
@{
	Layout = "_Master.cshtml";

	var status = Model.Status;

	var selectedPropEditor = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "SelectedPropEditor") as IDataEditor;
	var relatedDataTypes = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "RelatedDataTypes") as IEnumerable<IDataType>;
	var relatedProperties = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "RelatedProperties") as IEnumerable<DocTypeProperty>;

	//Column Widths for Cards
	var col1Class = "col-sm-3";
	var col2Class = "col-sm-9";
}

<h2>Edit Data By Property Type</h2>

<div class="card card-default">
	<h5 class="card-header">@selectedPropEditor.Name</h5>
	<div class="card-body">
		<dl class="row">
			<dt class="@col1Class">Alias</dt>
			<dd class="@col2Class">@selectedPropEditor.Alias</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Group</dt>
			<dd class="@col2Class">@selectedPropEditor.Group</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Is Deprecated?</dt>
			<dd class="@col2Class">@selectedPropEditor.IsDeprecated</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Type</dt>
			<dd class="@col2Class">@selectedPropEditor.Type</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Icon</dt>
			<dd class="@col2Class">@selectedPropEditor.Icon</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Default Configuration</dt>
			<dd class="@col2Class">
				<ul>
					@foreach (var config in selectedPropEditor.DefaultConfiguration)
					{
						var configType = config.Value.GetType();
						<li>
							<b>@config.Key:</b>
							@if (configType.Name.Contains("Dictionary"))
							{
								<span>DICTIONARY OF OPTIONS</span>
							}
							else if (configType == typeof(DateTime))
							{
								var dt = (DateTime)config.Value;
								<span>@dt.ToShortDateString()</span>
							}
							else
							{
								<span>@config.Value.ToString()</span>
							}

							<small> (@config.Value.GetType().ToString())</small>
						</li>
					}
				</ul>
			</dd>
		</dl>
	</div>
</div>

<h3> Drill-down: DataTypes</h3>
@if (relatedDataTypes != null)
{
	<ol>
		@foreach (var dataType in relatedDataTypes.OrderBy(n => n.Name))
		{
			switch (dataType.EditorAlias)
			{
				case "Umbraco.NestedContent":
					RenderNestedContentDataTypeInfo(dataType);
					break;

				default:
					RenderDefaultDataTypeInfo(dataType);
					break;
			}
		}
	</ol>
}

<h3> Drill-down: DocTypes and Properties</h3>
@if (relatedProperties != null)
{
	var doctypeGroups = new GroupingCollection<DocTypeProperty>(relatedProperties);
	doctypeGroups.GroupItems(n => n.DocTypeAlias);

	<ul>
		@foreach (var docType in doctypeGroups.Groups)
		{
			<li>
				<b>@docType.GroupName["Key"]</b>
				<ul>
					@foreach (var prop in docType.Collection.OrderBy(n => n.Property.Alias))
					{
						var thisDataType = DataTypeService.GetDataType(prop.Property.DataTypeId);
						<li>
							@prop.Property.Name (@prop.Property.Alias)
							<br />DataType: @thisDataType.Name
						</li>
					}
				</ul>
			</li>
		}
	</ul>
}

@functions {

	void RenderNestedContentDataTypeInfo(IDataType ThisDataType)
	{
		var innerProps = ViewHelpers.GetPropertiesOnNestedContent(ThisDataType);
		var url = $"/umbraco/backoffice/Dragonfly/DataEditingTools/StartDataType?DataTypeId={ThisDataType.Id}";
		<li>
			<b><a href="@url" target="_blank">@ThisDataType.Name</a></b>

			<table class="table table-sm">
				<tr>
					<th class="text-muted">DocType</th>
					<th class="text-muted">Property Alias</th>
					<th class="text-muted">DataType</th>
					<th class="text-muted">Editor</th>
				</tr>

				@foreach (var prop in innerProps)
				{
					var docTypeDetails = ContentTypeService.Get(prop.DocTypeAlias);
					var dataTypeDetails = DataTypeService.GetDataType(prop.Property.DataTypeId);
					var urlDataType = string.Format("/umbraco/backoffice/Dragonfly/DataEditingTools/StartDataType?DataTypeId={0}", dataTypeDetails.Id);

					<tr>
						<td>@docTypeDetails.Name (@prop.DocTypeAlias)</td>
						<td>@prop.Property.Alias </td>
						<td><a href="@urlDataType" target="_blank">@dataTypeDetails.Name</a></td>
						<td>@prop.Property.PropertyEditorAlias</td>
					</tr>
				}
			</table>
		</li>
	}

	void RenderDefaultDataTypeInfo(IDataType ThisDataType)
	{
		var url = $"/umbraco/backoffice/Dragonfly/DataEditingTools/StartDataType?DataTypeId={ThisDataType.Id}";
		<li>
			<b><a href="@url" target="_blank">@ThisDataType.Name</a></b>
		</li>
	}

}