@using System.Web.Mvc.Html
@using Dragonfly.DataEditingTools
@using Dragonfly.DataEditingTools.Models
@using Dragonfly.NetModels;
@using Dragonfly.NetHelpers
@using Newtonsoft.Json
@using Umbraco.Core.PropertyEditors

@inherits UmbracoViewPage<StatusMessage>

@{
    var status = Model;

    var SpecialMessage = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "SpecialMessage");
    var SpecialMessageClass = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "SpecialMessageClass");
    var SelectedPropEditor = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "SelectedPropEditor") as IDataEditor;
    var RelatedDataTypes = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "RelatedDataTypes") as IEnumerable<IDataType>;
    var RelatedProperties = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "RelatedProperties") as IEnumerable<DocTypeProperty>;

    var pvSS = ViewHelpers.GetViewsPath() + "Partials/StylesScripts.cshtml";
    var pvStatus = ViewHelpers.GetViewsPath() + "Partials/StatusMessage.cshtml";
    var pvFilesList = ViewHelpers.GetViewsPath() + "Partials/FilesList.cshtml";


    //Column Widths for Cards
    var col1Class = "col-sm-3";
    var col2Class = "col-sm-9";
}
<!DOCTYPE html>
<html>
<head>
    @Html.Partial(pvSS, "styles")
</head>
<body>
    <div class="container">

        <div class="d-inline-flex p-2" style="padding: .5em 0;">
            <a class="btn btn-sm btn-primary mr-2" href="/Umbraco/backoffice/Api/TransformationHelperApi/Start">Back to Start</a>
            @*<a class="btn btn-sm btn-info mr-2" href="@baseUrl">Remove All Filters</a>*@
            @*<a class="btn btn-sm btn-success mr-2" href="xx">XX</a>*@
        </div>

        <h1>Dragonfly Transformation 7 to 8 Helpers</h1>
        @if (!status.Success)
        {
            @Html.Partial(pvStatus, status)
        }
        else
        {
            if (SpecialMessage != "")
            {
                <div class="p-3 mb-2 @SpecialMessageClass text-white">
                    @Html.Raw(SpecialMessage)
                </div>
            }

        }

        <h2>Edit Data By Property Type</h2>

        <div class="card card-default">
            <h5 class="card-header">@SelectedPropEditor.Name</h5>
            <div class="card-body">
                <dl class="row">
                    <dt class="@col1Class">Alias</dt>
                    <dd class="@col2Class">@SelectedPropEditor.Alias</dd>
                </dl>
                <dl class="row">
                    <dt class="@col1Class">Group</dt>
                    <dd class="@col2Class">@SelectedPropEditor.Group</dd>
                </dl>
                <dl class="row">
                    <dt class="@col1Class">Is Deprecated?</dt>
                    <dd class="@col2Class">@SelectedPropEditor.IsDeprecated</dd>
                </dl>
                <dl class="row">
                    <dt class="@col1Class">Type</dt>
                    <dd class="@col2Class">@SelectedPropEditor.Type</dd>
                </dl>
                <dl class="row">
                    <dt class="@col1Class">Icon</dt>
                    <dd class="@col2Class">@SelectedPropEditor.Icon</dd>
                </dl>
                <dl class="row">
                    <dt class="@col1Class">Default Configuration</dt>
                    <dd class="@col2Class">
                        @foreach (var config in SelectedPropEditor.DefaultConfiguration)
                        {
                            <div><b>@config.Key</b> : <span>@config.Value</span></div>
                        }
                    </dd>
                </dl>
            </div>
        </div>

        <h3> Drill-down: DataTypes</h3>
        @if (RelatedDataTypes != null)
        {
            <ol>
                @foreach (var dataType in RelatedDataTypes.OrderBy(n => n.Name))
                {
                    switch (dataType.EditorAlias)
                    {
                        case "Umbraco.NestedContent":
                            @RenderNestedContentDataTypeInfo(dataType)
                            break;

                        default:
                            @RenderDefaultDataTypeInfo(dataType)
                            break;
                    }
                }
            </ol>
        }

        <h3> Drill-down: DocTypes and Properties</h3>
        @if (RelatedProperties != null)
        {
            var doctypeGroups = new GroupingCollection<DocTypeProperty>(RelatedProperties);
            doctypeGroups.GroupItems(n => n.DocTypeAlias);

            <ul>
                @foreach (var docType in doctypeGroups.Groups)
                {
                    <li>
                        <b>@docType.GroupName["Key"]</b>
                        <ul>
                            @foreach (var prop in docType.Collection.OrderBy(n => n.Property.Alias))
                            {
                                var thisDataType = Services.DataTypeService.GetDataType(prop.Property.DataTypeId);
                                <li>
                                    @prop.Property.Name (@prop.Property.Alias)
                                    <br />DataType: @thisDataType.Name
                                </li>
                            }
                        </ul>
                    </li>
                }
            </ul>
        }

        @*<div class="d-inline-flex p-2" style="padding: .5em 0;">
                <a class="btn btn-sm btn-success mr-2" href="/Umbraco/backoffice/Api/SiteTesterApi/TestAllNodesAndSave">Test All Nodes Now</a>
            </div>
            <div class="d-inline-flex p-2" style="padding: .5em 0;">
                <a class="btn btn-sm btn-success mr-2" href="/Umbraco/backoffice/Api/SiteTesterApi/TestDescendantNodesAndSave?StartNode=0">Test Subset of Nodes...</a>
            </div>*@


    </div>

    @*@Html.Partial(pvSS, "scripts")*@
</body>
</html>


@helper RenderNestedContentDataTypeInfo(IDataType ThisDataType)
{
    var innerProps = ViewHelpers.GetPropertiesOnNestedContent(ThisDataType);
    var url = string.Format("/Umbraco/backoffice/Api/TransformationHelperApi/StartDataType?DataTypeId={0}", ThisDataType.Id);
<li>
    <b><a href="@url" target="_blank">@ThisDataType.Name</a></b>

    <table class="table table-sm">
        <tr>
            <th class="text-muted">DocType</th>
            <th class="text-muted">Property Alias</th>
            <th class="text-muted">DataType</th>
            <th class="text-muted">Editor</th>
        </tr>

        @foreach (var prop in innerProps)
        {
            var docTypeDetails = Services.ContentTypeService.Get(prop.DocTypeAlias);
            var dataTypeDetails = Services.DataTypeService.GetDataType(prop.Property.DataTypeId);
            var urlDataType = string.Format("/Umbraco/backoffice/Api/TransformationHelperApi/StartDataType?DataTypeId={0}", dataTypeDetails.Id);

            <tr>
                <td>@docTypeDetails.Name (@prop.DocTypeAlias)</td>
                <td>@prop.Property.Alias </td>
                <td><a href="@urlDataType" target="_blank">@dataTypeDetails.Name</a></td>
                <td>@prop.Property.PropertyEditorAlias</td>
            </tr>
        }
    </table>
</li>
}

@helper RenderDefaultDataTypeInfo(IDataType ThisDataType)
{
 var url = string.Format("/Umbraco/backoffice/Api/TransformationHelperApi/StartDataType?DataTypeId={0}", ThisDataType.Id);
<li>
    <b><a href="@url" target="_blank">@ThisDataType.Name</a></b>


</li>
}