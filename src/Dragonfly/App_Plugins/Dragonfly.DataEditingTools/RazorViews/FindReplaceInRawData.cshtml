@inherits UmbracoViewPage<PageData<StatusMessage>>
@{
	Layout = "_Master.cshtml";
	var status = Model;

	var SelectedDataType = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "SelectedDataType") as IDataType;
	var SelectedDocType = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "SelectedDocType") as IContentType;
	var SelectedProperty = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "SelectedPropertyAlias") as PropertyType;
	var AffectedContentNodesIenum = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AffectedContentNodes") as IEnumerable<IContent>;
	var AffectedProperties = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AffectedProperties") as IEnumerable<DocTypeProperty>;
	var FormInputs = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "FormInputs") as FormInputsFindReplace;

	var AffectedContentNodes = AffectedContentNodesIenum.ToList();

	var propertyAliases = AffectedProperties.Select(n => n.Property.Alias).ToList();

	//Column Widths
	var col1Class = "col-sm-3";
	var col2Class = "col-sm-9";
	
	var pvFormFindReplace = ViewHelpers.GetViewsPath() + "Partials/FormFindReplace.cshtml";
	var pvFormReplaceWithUdis = ViewHelpers.GetViewsPath() + "Partials/FormReplaceWithUdis.cshtml";

}

		<h2>Update Content Node Data</h2>

		<div class="card card-default">
			<h5 class="card-header">Criteria</h5>
			<div class="card-body">
				<dl class="row">
					<dt class="@col1Class">Document Type</dt>
					<dd class="@col2Class">
						@if (SelectedDocType != null)
						{
							<text> @SelectedDocType.Name (@SelectedDocType.Alias)</text>
						}
						else
						{
							<b>All with Property:</b>
							<ul>
								@foreach (var prop in AffectedProperties)
								{
									<li>@prop.DocTypeAlias [@prop.Property.Name (@prop.Property.Alias)]</li>
								}
							</ul>
						}
					</dd>
				</dl>
				@if (SelectedProperty != null)
				{
					<dl class="row">
						<dt class="@col1Class">Property</dt>
						<dd class="@col2Class">@SelectedProperty.Name (@SelectedProperty.Alias)</dd>
					</dl>
				}
				<dl class="row">
					<dt class="@col1Class">DataType</dt>
					<dd class="@col2Class">@SelectedDataType.Name (@SelectedDataType.EditorAlias)</dd>
				</dl>

				<dl class="row">
					<dt class="@col1Class">Number of Affected Nodes</dt>
					<dd class="@col2Class">@AffectedContentNodes.Count()</dd>
				</dl>

				@if (SelectedDocType != null && SelectedDocType.IsElement)
				{
					var otherDataTypes = ViewHelpers.GetNestedContentDataTypes(SelectedDocType.Alias);
					<p>
						<i>
							<b> NOTE:</b> This is an Element Type. There won't be Content Nodes of this Type.
							<br />Try:
						</i>
						<ul>
							@foreach (var dt in otherDataTypes)
							{
								var urlRelatedDataType = string.Format("/umbraco/backoffice/Dragonfly/DataEditingTools/StartDataType?DataTypeId={0}", dt.Id.ToString());
								<li> <a href="@urlRelatedDataType">@dt.Name</a></li>
							}
						</ul>
					</p>
				}
			</div>
		</div>

		<h3 class="mt-2">Affected Content Nodes</h3>
		@if (AffectedContentNodes.Any())
		{
			var counter = 0;
			<table id="umbracodata" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="width: 100%">
				<thead>
					<tr>
						<th>#</th>
						<th>Actions</th>
						<th>Node Id</th>
						<th>Node Name</th>
						<th>Node Is Published</th>
						<th>Property Alias</th>
						<th>Property Data</th>
						<th>Property Data Length</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var node in AffectedContentNodes)
					{
						var propsData = node.Properties.Where(n => propertyAliases.Contains(n.Alias));

						foreach (var propertyData in propsData)
						{
							counter++;

							<tr>
								<td>@counter</td>
								<td>
									<a href="/umbraco/#/content/content/edit/@node.Id" target="_blank">Edit in Umbraco</a>
								</td>
								<td>@node.Id</td>
								<td>@node.Name</td>
								<td>@node.Published</td>
								<td>@propertyData.Alias</td>
								<td>@propertyData.GetValue()</td>
								<td>@(propertyData.GetValue() != null ? propertyData.GetValue().ToString().Length : 0)</td>
							</tr>
						}
					}
				</tbody>
			</table>
		}
		else
		{
			<i style="color:red;">There is no data available currently.</i>
		}

		@if (ViewHelpers.IsEligibleForIdToUdiReplace(SelectedDataType.EditorAlias))
		{
			@await Html.PartialAsync(pvFormReplaceWithUdis, FormInputs)
		}


@await Html.PartialAsync(pvFormFindReplace, FormInputs)


@section FooterScripts {
	<script type="text/javascript">
		$(document).ready(function() {

			// Setup - add a text input to each footer cell
			$('#umbracodata tfoot th').each(function() {
				var title = $(this).text();
				$(this).html('<input type="text" placeholder="Search ' + title + '" />');
			});

			$('#umbracodata').DataTable({
				"lengthMenu": [[10, 25, 50, - 1], [10, 25, 50, "All"]]
			});

			// Apply the search
			table.columns().every(function() {
				var that = this;

				$('input', this.footer()).on('keyup change',
					function() {
						if (that.search() !== this.value) {
							that
								.search(this.value)
								.draw();
						}
					});
			});

		});
	</script>
}