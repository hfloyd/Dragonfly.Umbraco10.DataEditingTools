@inherits UmbracoViewPage<PageData<StatusMessage>>
@{
	Layout = "_Master.cshtml";
	var status = Model.Status;

	var SelectedMediaType = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "SelectedMediaType") as IMediaType;
	var AllCompositions = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AllCompositions") as IEnumerable<CompositionsWithTypes>;
	var RelatedProperties = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "RelatedProperties") as IEnumerable<DocTypeProperty>;
	var MediaNodesOfType = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "MediaNodesOfType") as IEnumerable<IMedia>;

	var urlBackofficeMain = string.Format("/umbraco#/settings/mediaTypes/edit/{0}", SelectedMediaType.Id);
	var allComps = AllCompositions.SelectMany(n => n.Compositions);
	var allCompIds = allComps.Select(n => n.Id);
	var isComp = allCompIds.Contains(SelectedMediaType.Id);
	var mediaTypesUsingComp = AllCompositions.Where(n => n.Compositions.Any(c => c.Id == SelectedMediaType.Id));

	var urlPropToProp = string.Format("/umbraco/backoffice/Dragonfly/DataEditingTools/TransferMediaPropertyToPropertySetup?MediaTypeId={0}", SelectedMediaType.Id);

	var ncTypes = ViewHelpers.GetNestedContentDataTypes(SelectedMediaType.Alias);

	//Column Widths for Cards
	var col1Class = "col-sm-3";
	var col2Class = "col-sm-9";
}

<h2>Edit Data By Media Type</h2>

<div class="card card-default">
	<h5 class="card-header">@SelectedMediaType.Name (@SelectedMediaType.Alias)</h5>
	<div class="card-body">
		<dl class="row">
			<dt class="@col1Class">Id / GUID</dt>
			<dd class="@col2Class">@SelectedMediaType.Id / @SelectedMediaType.Key</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Is an Element Type?</dt>
			<dd class="@col2Class">@SelectedMediaType.IsElement</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Is a Composition?</dt>
			<dd class="@col2Class">@isComp</dd>
		</dl>
		@if (isComp)
		{
			<dl class="row">
				<dt class="@col1Class">Types Using this Composition</dt>
				<dd class="@col2Class">
					<ul>
						@foreach (var item in mediaTypesUsingComp)
						{
							var type = MediaTypeService.Get(item.ContentTypeAlias);
							var url = $"/umbraco/backoffice/Dragonfly/DataEditingTools/StartMediaType?MediaTypeId={type.Id.ToString()}";
							<li> <a href="@url" target="_blank">@type.Name</a> (@type.Alias)</li>
						}
					</ul>
				</dd>
			</dl>
		}
		<dl class="row">
			<dt class="@col1Class">Uses Compositions</dt>
			<dd class="@col2Class">
				@{
					var comps = SelectedMediaType.ContentTypeComposition;
				}
				@if (comps.Any())
				{
					<ul>
						@foreach (var comp in comps)
						{
							var url = $"/umbraco/backoffice/Dragonfly/DataEditingTools/StartMediaType?MediaTypeId={comp.Id.ToString()}";
							<li><a href="@url" target="_blank">@comp.Name (@comp.Alias)</a></li>
						}
					</ul>
				}
				else
				{
					<text>None</text>
				}
			</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Allowed Children</dt>
			<dd class="@col2Class">
				@if (SelectedMediaType.AllowedContentTypes.Any())
				{
					<ul>
						@foreach (var allowedType in SelectedMediaType.AllowedContentTypes)
						{
							<li>@allowedType.Alias</li>
						}
					</ul>
				}
				else
				{
					<text>None</text>
				}

			</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class"># of Media Nodes</dt>
			<dd class="@col2Class">@MediaNodesOfType.Count()</dd>
		</dl>
		@if (ncTypes.Any())
		{
			<dl class="row">
				<dt class="@col1Class">Nested Content DataTypes Using this MediaType</dt>
				<dd class="@col2Class">
					<ul>
						@foreach (var type in ncTypes)
						{
							var url = $"/umbraco/backoffice/Dragonfly/DataEditingTools/StartDataType?DataTypeId={type.Id.ToString()}";
							<li><a href="@url" target="_blank">@type.Name (@type.EditorAlias)</a></li>
						}
					</ul>
				</dd>
			</dl>
		}
		@*<dl class="row">
		<dt class="@col1Class">Configuration JSON</dt>
		<dd class="@col2Class">@JsonConvert.SerializeObject(SelectedDataType.Configuration)</dd>
		</dl>*@
		<a class="btn btn-sm btn-success mr-2" href="@urlBackofficeMain" target="_blank">Edit this MediaType in the Back-office</a>
		<a class="btn btn-sm btn-success mr-2" href="@urlPropToProp" target="_blank">Transfer Data between properties on this MediaType</a>

	</div>

</div>


@if (RelatedProperties != null)
{
	<h3 class="mt-2">Drill-down: Properties</h3>
	var typeGroups = new GroupingCollection<DocTypeProperty>(RelatedProperties);
	typeGroups.GroupItems(n => n.DocTypeAlias);

	<ul>
		@foreach (var type in typeGroups.Groups)
		{
			var typeAlias = type.GroupName["Key"].ToString();
			var typeDetails = MediaTypeService.Get(typeAlias);
			//var urlReplace = string.Format("/umbraco/backoffice/Dragonfly/DataEditingTools/SetupReplaceInData?DocTypeAlias={0}&DataTypeId={1}", docTypeAlias, SelectedDataType.Id);
			var urlBackoffice = string.Format("/umbraco#/settings/mediaTypes/edit/{0}", typeDetails.Id.ToString());
			var propGroups = new GroupingCollection<DocTypeProperty>(type.Collection);
			propGroups.GroupItems(n => n.GroupName);

			<li>
				<b>@typeDetails.Name (@typeAlias)</b>
				<br />
				@*  <a class="btn btn-sm btn-success mr-2" href="@urlReplace" target="_blank">Fix Data in this DocType/DataType</a>
		<a class="btn btn-sm btn-success mr-2" href="@urlBackoffice" target="_blank">Edit this DocType in the Back-office</a>*@

				@*<p class="mt-1"><i>Properties matching DataType:</i></p>*@
				<ul>
					@foreach (var propGroup in propGroups.Groups)
					{
						var groupName = @propGroup.GroupName["Key"].ToString();

						<li>
							<h5>@groupName</h5>
							<table class="table table-hover table-condensed">

								@foreach (var prop in propGroup.Collection.OrderBy(n => n.Property.Alias))
								{
									var thisDataType = DataTypeService.GetDataType(prop.Property.DataTypeId);
									var urlReplace = $"/umbraco/backoffice/Dragonfly/DataEditingTools/SetupReplaceInData?MediaTypeAlias={typeAlias}&PropertyAlias={prop.Property.Alias}";
									var urlReplaceAll = $"/umbraco/backoffice/Dragonfly/DataEditingTools/SetupReplaceInData?PropertyAlias={prop.Property.Alias}";

									<tr>
										<td>
											<b>@prop.Property.Name</b> (@prop.Property.Alias)
											@if (prop.CompositionDocTypeAlias != "")
											{
												<span class="badge badge-secondary">@prop.CompositionDocTypeAlias</span>
											}
										</td>
										<td>
											DataType: @thisDataType.Name
										</td>
										@*  <td>
						<a class="btn btn-sm btn-success mr-2 mb-1" href="@urlReplace" target="_blank">Fix Data in this MediaType/Property</a>
						<a class="btn btn-sm btn-success mr-2" href="@urlReplaceAll" target="_blank">Fix Data in this Property across MediaTypes</a>
						</td>*@
									</tr>
								}
							</table>

						</li>
					}
				</ul>
			</li>
		}
	</ul>
}

@if (MediaNodesOfType.Any())
{
	<h3 class="mt-2">Media Nodes</h3>
	var counter = 0;
	<table id="umbracodata" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="max-width: 1600px !important;">
		<thead>
			<tr>
				<th>#</th>
				<th>Node Id</th>
				<th>Node Name</th>
				<th>File</th>
				@*<th>Template</th>*@
			</tr>
		</thead>
		<tbody>
			@foreach (var node in MediaNodesOfType.ToList())
			{
				counter++;

				var urlBackoffice = string.Format("/umbraco/#/media/media/edit/{0}", node.Id.ToString());
				var fileUrl = node.GetValue<string>(Constants.Conventions.Media.File);
				<tr>
					<td>@counter</td>
					<td><a href="@urlBackoffice" target="_blank">@node.Id</a></td>
					<td>@node.Name</td>
					<td>@fileUrl</td>
					@*<td>@templateInfo</td>*@
				</tr>
			}
		</tbody>
	</table>
}


@section FooterScripts {
	<script type="text/javascript">
		$(document).ready(function () {

			// Setup - add a text input to each footer cell
			$('#umbracodata tfoot th').each(function () {
				var title = $(this).text();
				$(this).html('<input type="text" placeholder="Search ' + title + '" />');
			});

			$('#umbracodata').DataTable({
				"lengthMenu": [[10, 25, 50, - 1], [10, 25, 50, "All"]]
			});

			// Apply the search
			table.columns().every(function () {
				var that = this;

				$('input', this.footer()).on('keyup change',
					function () {
						if (that.search() !== this.value) {
							that
								.search(this.value)
								.draw();
						}
					});
			});
		});
	</script>
}

