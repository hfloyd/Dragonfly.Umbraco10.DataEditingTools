@inherits UmbracoViewPage<PageData<PropToPropResultsSet>>
@{
	Layout = "_Master.cshtml";

	var status = Model.Status;
	var results = Model.DataModel;

	var selectedType = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "SelectedType");
	var formInputs = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "FormInputs") as FormInputsPropertyToProperty;
	var affectedNodes = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AffectedNodes");

	//Content or Media?
	var nodesType = formInputs.NodeTypes;

	IContentType selectedDocType;
	IMediaType selectedMediaType;

	List<IContent> affectedContentNodes = new List<IContent>();
	List<IMedia> affectedMediaNodes = new List<IMedia>();

	var selectedTypeName = "";
	var selectedTypeAlias = "";
	var selectedTypeIsElement = false;
	int affectedNodesCount = 0;

	if (nodesType == Enums.NodeType.Content)
	{
		selectedDocType = selectedType as IContentType;
		selectedTypeName = selectedDocType.Name;
		selectedTypeAlias = selectedDocType.Alias;
		selectedTypeIsElement = selectedDocType.IsElement;

		affectedContentNodes = affectedNodes as List<IContent>;
		affectedNodesCount = affectedContentNodes != null ? affectedContentNodes.Count : 0;
	}
	else if (nodesType == Enums.NodeType.Media)
	{
		selectedMediaType = selectedType as IMediaType;
		selectedTypeName = selectedMediaType.Name;
		selectedTypeAlias = selectedMediaType.Alias;
		selectedTypeIsElement = selectedMediaType.IsElement;

		var nodes = affectedNodes as IEnumerable<IMedia>;
		affectedMediaNodes = nodes.ToList();
		affectedNodesCount = affectedMediaNodes != null ? affectedMediaNodes.Count : 0;
	}
	
	var propertyAliases = formInputs.AvailablePropertiesCSV.Split(',').ToList();

	//Column Widths
	var col1Class = "col-sm-3";
	var col2Class = "col-sm-9";

	var pvFormPropToProp = ViewHelpers.GetViewsPath() + "Partials/FormPropToProp.cshtml";

	var mode = "Setup";
	if (formInputs.PropertyAliasFrom != "" && formInputs.PropertyAliasTo != "")
	{
		mode = "Display";
	}

	var customMigClass = formInputs.CustomTransformationClass;
	var typeDescription = !string.IsNullOrEmpty(customMigClass) ? formInputs.PropToPropTypeOption.ToString() + " : " + customMigClass : formInputs.PropToPropTypeOption.ToString();
}

<h2>Transfer @nodesType.ToString() Node Property Data to Another Property</h2>
<p>This is most useful when you have an old-format data property and a new (empty) new format data property and need to copy current data to the new property.</p>
<div class="card card-default">
	<h5 class="card-header">Criteria</h5>
	<div class="card-body">
		<dl class="row">
			<dt class="@col1Class">@nodesType.ToString() Type</dt>
			<dd class="@col2Class">@selectedTypeName (@selectedTypeAlias)</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">From Property Alias</dt>
			<dd class="@col2Class">@formInputs.PropertyAliasFrom</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">To Property Alias</dt>
			<dd class="@col2Class">@formInputs.PropertyAliasTo</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Type</dt>
			<dd class="@col2Class">@typeDescription</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Overwrite Existing Data?</dt>
			<dd class="@col2Class">@formInputs.OverwriteExistingData</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Number of Affected Nodes</dt>
			<dd class="@col2Class">@affectedNodesCount</dd>
		</dl>

		@if (selectedTypeIsElement)
		{
			var otherDataTypes = ViewHelpers.GetNestedContentDataTypes(selectedTypeAlias);
			<p>
				<i>
					<b> NOTE:</b> This is an Element Type. There won't be Nodes of this Type.
					<br />Try:
				</i>
				<ul>
					@foreach (var dt in otherDataTypes)
					{
						var urlRelatedDataType = $"/umbraco/backoffice/Dragonfly/DataEditingTools/StartDataType?DataTypeId={dt.Id.ToString()}";
						<li> <a href="@urlRelatedDataType">@dt.Name</a></li>
					}
				</ul>
			</p>
		}
	</div>
</div>

@if (mode != "Setup")
{
	if (!results.DataUpdatedAndSaved)
	{
		<h3>PREVIEW of @nodesType.ToString() Nodes Changes</h3>
	}
	else
	{
		<h3>@nodesType.ToString() Nodes UPDATED</h3>
	}

	if (results.Results.Any())
	{
		var counter = 0;
		<table id="umbracodata" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="max-width: 1600px !important;">
			<thead>
				<tr>
					<th>#</th>
					<th>Node Id</th>
					<th>Node Name</th>
					@if (nodesType == Enums.NodeType.Content)
					{
						<th>Node Is Published</th>
					}
					<th>From Property Value</th>
					<th>Valid?</th>
					<th>To Property Value</th>
					<th>Status</th>
				</tr>
			</thead>
			<tbody>
				@if (nodesType == Enums.NodeType.Content)
				{
					foreach (var result in results.Results)
					{
						var node = result.ContentNode;
						var urlBackoffice = string.Format("/umbraco/#/content/content/edit/{0}", node.Id.ToString());

						counter++;
						var rowClass = result.ContentUpdated == true ? "table-success" : "";

						<tr class="@rowClass">
							<td>@counter</td>
							<td><a href="@urlBackoffice" target="_blank">@node.Id</a></td>
							<td>@node.Name</td>
							<td>@node.Published</td>
							<td>@result.PropertyFromData</td>
							<td>@result.ValidToTransfer</td>
							<td>@result.PropertyToData</td>
							<td>@result.Status</td>
						</tr>
					}
				}
				else if (nodesType == Enums.NodeType.Media)
				{
					foreach (var result in results.Results)
					{
						var node = result.MediaNode;
						var urlBackoffice = $"/umbraco/#/media/media/edit/{node.Id.ToString()}";

						counter++;
						var rowClass = result.ContentUpdated == true ? "table-success" : "";

						<tr class="@rowClass">
							<td>@counter</td>
							<td><a href="@urlBackoffice" target="_blank">@node.Id</a></td>
							<td>@node.Name</td>
							<td>@result.PropertyFromData</td>
							<td>@result.ValidToTransfer</td>
							<td>@result.PropertyToData</td>
							<td>@result.Status</td>
						</tr>
					}
				}

			</tbody>
		</table>
	}
	else
	{
		<i style="color:red;">There is no data available currently.</i>
	}

}


@await Html.PartialAsync(pvFormPropToProp, formInputs)

@if (mode == "Setup")
{
	<h3 class="mt-2">Affected Nodes - Examples of Existing Property Data for Reference</h3>
	if (affectedNodesCount > 0)
	{
		if (nodesType == Enums.NodeType.Content)
		{
			RenderContentNodesTable(affectedContentNodes, propertyAliases);
		}
		else if (nodesType == Enums.NodeType.Media)
		{
			RenderMediaNodesTable(affectedMediaNodes, propertyAliases);
		}
	}
	else
	{
		<i style="color: red;">There is no data available currently.</i>
	}
}


@section FooterScripts {
	<script type="text/javascript">
		$(document).ready(function () {

			// Setup - add a text input to each footer cell
			$('#umbracodata tfoot th').each(function () {
				var title = $(this).text();
				$(this).html('<input type="text" placeholder="Search ' + title + '" />');
			});

			$('#umbracodata').DataTable({
				"lengthMenu": [[10, 25, 50, - 1], [10, 25, 50, "All"]]
			});
			74
			// Apply the search
			table.columns().every(function () {
				var that = this;

				$('input', this.footer()).on('keyup change', function () {
					if (that.search() !== this.value) {
						that
							.search(this.value)
							.draw();
					}
				});
			});

		});
	</script>
}

@functions {
	void RenderContentNodesTable(IEnumerable<IContent> Nodes, IEnumerable<string> PropertyAliases)
	{
		var counter = 0;
		<table id="umbracodata" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="width: 100%">
			<thead>
				<tr>
					<th>#</th>
					<th>Actions</th>
					<th>Node Id</th>
					<th>Node Name</th>
					<th>Node Is Published</th>
					<th>Property Alias</th>
					<th>Property Data</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var node in Nodes)
				{
					var propsData = node.Properties.Where(n => PropertyAliases.Contains(n.Alias));

					foreach (var propertyData in propsData)
					{
						counter++;

						<tr>
							<td>@counter</td>
							<td>
								<a href="/umbraco/#/content/content/edit/@node.Id" target="_blank">Edit in Umbraco</a>
							</td>
							<td>@node.Id</td>
							<td>@node.Name</td>
							<td>@node.Published</td>
							<td>@propertyData.Alias</td>
							<td>@propertyData.GetValue()</td>
						</tr>
					}
				}
			</tbody>
		</table>
	}

	void RenderMediaNodesTable(IEnumerable<IMedia> Nodes, IEnumerable<string> PropertyAliases)
	{
		var counter = 0;
		<table id="umbracodata" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="width: 100%">
			<thead>
				<tr>
					<th>#</th>
					<th>Actions</th>
					<th>Node Id</th>
					<th>Node Name</th>
					<th>Property Alias</th>
					<th>Property Data</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var node in Nodes)
				{
					var propsData = node.Properties.Where(n => PropertyAliases.Contains(n.Alias));

					foreach (var propertyData in propsData)
					{
						counter++;

						<tr>
							<td>@counter</td>
							<td>
								<a href="/umbraco/#/content/content/edit/@node.Id" target="_blank">Edit in Umbraco</a>
							</td>
							<td>@node.Id</td>
							<td>@node.Name</td>
							<td>@propertyData.Alias</td>
							<td>@propertyData.GetValue()</td>
						</tr>
					}
				}
			</tbody>
		</table>
	}
}
