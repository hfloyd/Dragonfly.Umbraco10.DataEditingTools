@inherits UmbracoViewPage<PageData<FindReplaceResultsSet>>
@{
	Layout = "_Master.cshtml";

	var status = Model.Status;
	var findReplaceResults = Model.DataModel;

	//var FormInputs = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "FormInputs") as FormInputsFindReplace;
	//var AffectedContentNodes = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AffectedContentNodes") as IEnumerable<IContent>;
	//var ResultSetDisplayName = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "ResultSetDisplayName");
	//var SearchPhrase = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "SearchPhrase");


	//Column Widths
	var col1Class = "col-sm-3";
	var col2Class = "col-sm-9";

	var pvFormReplaceWithUdis = ViewHelpers.GetViewsPath() + "Partials/FormReplaceWithUdis.cshtml";
}


<h3>Current Options for Udi Replacement</h3>
<div class="card card-default">
	<h5 class="card-header">Criteria</h5>
	<div class="card-body">
		<dl class="row">
			<dt class="@col1Class">Type</dt>
			<dd class="@col2Class">@findReplaceResults.Type.ToString()</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Multi-Select Property</dt>
			<dd class="@col2Class">@findReplaceResults.FormInputs.FullPropertyIsMultiple</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Preview Only?</dt>
			<dd class="@col2Class">@findReplaceResults.FormInputs.PreviewOnly</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Property Aliases</dt>
			<dd class="@col2Class">
				<ul>
					@foreach (var alias in findReplaceResults.PropertyAliases)
					{
						<li>@alias</li>
					}
				</ul>
			</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Number of Affected Nodes</dt>
			<dd class="@col2Class">@findReplaceResults.Results.Count()</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Content Has Been Updated?</dt>
			<dd class="@col2Class">@findReplaceResults.DataUpdatedAndSaved</dd>
		</dl>
	</div>
</div>

@if (!findReplaceResults.DataUpdatedAndSaved)
{
	<h3 class="mt-2">PREVIEW of Content Nodes Changes</h3>
}
else
{
	<h3 class="mt-2">Content Nodes UPDATED</h3>
}

@if (findReplaceResults.Results.Any())
{
	var counter = 0;
	<table id="umbracodata" class="table table-striped table-bordered table-hover table-sm" cellspacing="0">
		<thead>
			<tr>
				<th>#</th>
				<th>Node Id</th>
				<th>Node Name</th>
				<th>Node Is Published</th>
				<th>Property Alias</th>
				<th>Original Data Format</th>
				<th>Node Match was Found?</th>
				<th>Original Property Value</th>
				<th>Updated Property Value</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var result in findReplaceResults.Results)
			{
				var node = result.ContentNode;
				var urlBackoffice = string.Format("/umbraco/#/content/content/edit/{0}", node.Id.ToString());

				counter++;
				var rowClass = result.ContentUpdated == true ? "table-success" : "";
				var origData = result.OriginalPropertyData;
				var newData = result.NewPropertyData;

				<tr class="@rowClass">
					<td>@counter</td>
					<td><a href="@urlBackoffice" target="_blank">@node.Id</a></td>
					<td>@node.Name</td>
					<td>@node.Published</td>
					<td>@result.PropertyAlias</td>
					<td>@result.CurrentDataFormat</td>
					<td>@result.MatchFound</td>
					<td>@origData</td>
					<td>@newData</td>
				</tr>
			}

		</tbody>
	</table>
}
else
{
	<i style="color:red;">There is no data available currently.</i>
}


@await Html.PartialAsync(pvFormReplaceWithUdis, findReplaceResults.FormInputs)


@section FooterScripts {
	<script type="text/javascript">
		$(document).ready(function () {

			// Setup - add a text input to each footer cell
			$('#umbracodata tfoot th').each(function () {
				var title = $(this).text();
				$(this).html('<input type="text" placeholder="Search ' + title + '" />');
			});

			$('#umbracodata').DataTable({
				"lengthMenu": [[10, 25, 50, - 1], [10, 25, 50, "All"]]
			});

			// Apply the search
			table.columns().every(function () {
				var that = this;

				$('input', this.footer()).on('keyup change', function () {
					if (that.search() !== this.value) {
						that
							.search(this.value)
							.draw();
					}
				});
			});
		});
	</script>
}
