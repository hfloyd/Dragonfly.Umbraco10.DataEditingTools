@inherits UmbracoViewPage<StatusMessage>
@{
	Layout = "_Master.cshtml";
    var status = Model;

    var SpecialMessage = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "SpecialMessage");
    var SpecialMessageClass = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "SpecialMessageClass");

    // var SelectedDocType = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "SelectedDocType") as IContentType;
    var FormInputs = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "FormInputs") as FormInputsStoreLegacyData;
    //  var AffectedContentNodesIenum = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AffectedContentNodes") as IEnumerable<IContent>;
    var Results = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "Results") as LegacyDataResultsSet;

    // var AffectedContentNodes = AffectedContentNodesIenum.ToList();

    //var propertyAliasesContent = FormInputs.AvailableContentPropertiesCSV.Split(',').ToList();
    //var propertyAliasesMedia = FormInputs.AvailableMediaPropertiesCSV.Split(',').ToList();

    //Column Widths
    var col1Class = "col-sm-3";
    var col2Class = "col-sm-9";

    var pvException = ViewHelpers.GetViewsPath() + "Partials/ExceptionDetailsLink.cshtml";
    var pvSS = ViewHelpers.GetViewsPath() + "Partials/StylesScripts.cshtml";
    var pvStatus = ViewHelpers.GetViewsPath() + "Partials/StatusMessage.cshtml";
    var pvFormStoreLegacyData = ViewHelpers.GetViewsPath() + "Partials/FormStoreLegacyData.cshtml";
    //var pvFormReplaceWithUdis = ViewHelpers.GetViewsPath() + "Partials/FormReplaceWithUdis.cshtml";

    var mode = "Setup";
    if (FormInputs.PropertyAliasContentNodeId != "" || FormInputs.PropertyAliasMediaNodeId != "")
    {
        mode = "Display";
    }

}
<!DOCTYPE html>
<html>
<head>
    @Html.Partial(pvSS, "styles")
</head>
<body>
    <div class="container-fluid">

        <div class="d-inline-flex p-2" style="padding: .5em 0;">
            <a class="btn btn-sm btn-primary mr-2" href="/umbraco/backoffice/Dragonfly/DataEditingTools/Start">Back to Start</a>
            @*<a class="btn btn-sm btn-info mr-2" href="@baseUrl">Remove All Filters</a>*@
            @*<a class="btn btn-sm btn-success mr-2" href="xx">XX</a>*@
        </div>

        <h1>Dragonfly Transformation 7 to 8 Helpers</h1>

        @if (!status.Success)
        {
            @Html.Partial(pvStatus, status)
        }
        else
        {
            if (SpecialMessage != "")
            {
                <div class="p-3 mb-2 @SpecialMessageClass">
                    @Html.Raw(SpecialMessage)
                </div>
            }
        }

        <h2>Store Legacy Data</h2>
        @*     <p>This is most useful when you have an old-format data property and a new (empty) new format data property and need to copy current data to the new property.</p>*@
        <div class="card card-default">
            <h5 class="card-header">Criteria</h5>
            <div class="card-body">
                @*<dl class="row">
                    <dt class="@col1Class">Document Type</dt>
                    <dd class="@col2Class">@SelectedDocType.Name (@SelectedDocType.Alias)</dd>
                </dl>*@
                <dl class="row">
                    <dt class="@col1Class">Content Node Id Property Alias</dt>
                    <dd class="@col2Class">@FormInputs.PropertyAliasContentNodeId</dd>
                </dl>
                <dl class="row">
                    <dt class="@col1Class">Media Node Id Property Alias</dt>
                    <dd class="@col2Class">@FormInputs.PropertyAliasMediaNodeId</dd>
                </dl>
                <dl class="row">
                    <dt class="@col1Class">Overwrite Existing Data?</dt>
                    <dd class="@col2Class">@FormInputs.OverwriteExistingData</dd>
                </dl>
                @*<dl class="row">
                    <dt class="@col1Class">Number of Content Nodes</dt>
                    <dd class="@col2Class">@AffectedContentNodes.Count()</dd>
                </dl>*@

            </div>
        </div>

        @if (mode != "Setup" && Results!=null)
        {
            if (!Results.DataUpdatedAndSaved)
            {
                <h3>PREVIEW of Node Changes</h3>
            }
            else
            {
                <h3>Nodes UPDATED</h3>
            }

            if (Results.Results.Any())
            {
                var counter = 0;
                <table id="umbracodata" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="max-width: 1600px !important;">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Node Type</th>
                            <th>Node Id</th>
                            <th>Node Name</th>
                            <th>Node Is Published</th>
                            <th>Valid?</th>
                            <th>Legacy Property</th>
                            <th>Legacy Prop Value</th>
                        </tr>
                    </thead>
                    <tbody>
                    <!--CONTENT NODES-->
                    @foreach (var result in Results.Results.Where(n=> n.Type== Enums.NodeType.Content))
                    {
                        var node = result.ContentNode;
                        var urlBackoffice = string.Format("/umbraco/#/content/content/edit/{0}", node.Id.ToString());

                        counter++;
                        var rowClass = result.NodeUpdated == true ? "table-success" : "";

                        <tr class="@rowClass">
                            <td>@counter</td>
                            <td>Content</td>
                            <td><a href="@urlBackoffice" target="_blank">@node.Id</a></td>
                            <td>@node.Name</td>
                            <td>@node.Published</td>
                            <td>@result.ValidToTransfer</td>
                            <td>@result.IdPropertyAlias</td>
                            <td>@result.IdData</td>
                        </tr>
                    }
                    <!--MEDIA NODES-->
                    @foreach (var result in Results.Results.Where(n=> n.Type== Enums.NodeType.Media))
                    {
                        var node = result.MediaNode;
                        var urlBackoffice = string.Format("/umbraco/#/media/media/edit/{0}", node.Id.ToString());

                        counter++;
                        var rowClass = result.NodeUpdated == true ? "table-success" : "";

                        <tr class="@rowClass">
                            <td>@counter</td>
                            <td>Media</td>
                            <td><a href="@urlBackoffice" target="_blank">@node.Id</a></td>
                            <td>@node.Name</td>
                            <td>N/A</td>
                            <td>@result.ValidToTransfer</td>
                            <td>@result.IdPropertyAlias</td>
                            <td>@result.IdData</td>
                        </tr>
                    }

                    </tbody>
                </table>
            }
            else
            {
                <i style="color:red;">There is no data available currently.</i>
            }

        }

        @Html.Partial(pvFormStoreLegacyData, FormInputs)


    </div>

    @Html.Partial(pvSS, "scripts")

    <script type="text/javascript">
        $(document).ready(function () {

            // Setup - add a text input to each footer cell
            $('#umbracodata tfoot th').each(function () {
                var title = $(this).text();
                $(this).html('<input type="text" placeholder="Search ' + title + '" />');
            });

            $('#umbracodata').DataTable({
                "lengthMenu": [[10, 25, 50, - 1], [10, 25, 50, "All"]]
            });

            // Apply the search
            table.columns().every(function () {
                var that = this;

                $('input', this.footer()).on('keyup change', function () {
                    if (that.search() !== this.value) {
                        that
                            .search(this.value)
                            .draw();
                    }
                });
            });

        });
    </script>
</body>
</html>
