@inherits UmbracoViewPage<PageData<LegacyDataResultsSet>>
@{
	Layout = "_Master.cshtml";

	var status = Model.Status;
	var results = Model.DataModel;

	var formInputs = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "FormInputs") as FormInputsStoreLegacyData;

	//Column Widths
	var col1Class = "col-sm-3";
	var col2Class = "col-sm-9";

	var pvFormStoreLegacyData = ViewHelpers.GetViewsPath() + "Partials/FormStoreLegacyData.cshtml";

	var mode = "Setup";
	if (formInputs.PropertyAliasContentNodeId != "" || formInputs.PropertyAliasMediaNodeId != "")
	{
		mode = "Display";
	}

}


<h2>Store Legacy Data</h2>
@*     <p>This is most useful when you have an old-format data property and a new (empty) new format data property and need to copy current data to the new property.</p>*@
<div class="card card-default">
	<h5 class="card-header">Criteria</h5>
	<div class="card-body">
		@*<dl class="row">
		<dt class="@col1Class">Document Type</dt>
		<dd class="@col2Class">@SelectedDocType.Name (@SelectedDocType.Alias)</dd>
		</dl>*@
		<dl class="row">
			<dt class="@col1Class">Content Node Id Property Alias</dt>
			<dd class="@col2Class">@formInputs.PropertyAliasContentNodeId</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Media Node Id Property Alias</dt>
			<dd class="@col2Class">@formInputs.PropertyAliasMediaNodeId</dd>
		</dl>
		<dl class="row">
			<dt class="@col1Class">Overwrite Existing Data?</dt>
			<dd class="@col2Class">@formInputs.OverwriteExistingData</dd>
		</dl>
		@*<dl class="row">
		<dt class="@col1Class">Number of Content Nodes</dt>
		<dd class="@col2Class">@AffectedContentNodes.Count()</dd>
		</dl>*@

	</div>
</div>

@if (mode != "Setup" && results != null)
{
	if (!results.DataUpdatedAndSaved)
	{
		<h3>PREVIEW of Node Changes</h3>
	}
	else
	{
		<h3>Nodes UPDATED</h3>
	}

	if (results.Results.Any())
	{
		var counter = 0;
		<table id="umbracodata" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="max-width: 1600px !important;">
			<thead>
				<tr>
					<th>#</th>
					<th>Node Type</th>
					<th>Node Id</th>
					<th>Node Name</th>
					<th>Node Is Published</th>
					<th>Valid?</th>
					<th>Legacy Property</th>
					<th>Legacy Prop Value</th>
				</tr>
			</thead>
			<tbody>
				<!--CONTENT NODES-->
				@foreach (var result in results.Results.Where(n => n.Type == Enums.NodeType.Content))
				{
					var node = result.ContentNode;
					var urlBackoffice = string.Format("/umbraco/#/content/content/edit/{0}", node.Id.ToString());

					counter++;
					var rowClass = result.NodeUpdated == true ? "table-success" : "";

					<tr class="@rowClass">
						<td>@counter</td>
						<td>Content</td>
						<td><a href="@urlBackoffice" target="_blank">@node.Id</a></td>
						<td>@node.Name</td>
						<td>@node.Published</td>
						<td>@result.ValidToTransfer</td>
						<td>@result.IdPropertyAlias</td>
						<td>@result.IdData</td>
					</tr>
				}
				<!--MEDIA NODES-->
				@foreach (var result in results.Results.Where(n => n.Type == Enums.NodeType.Media))
				{
					var node = result.MediaNode;
					var urlBackoffice = string.Format("/umbraco/#/media/media/edit/{0}", node.Id.ToString());

					counter++;
					var rowClass = result.NodeUpdated == true ? "table-success" : "";

					<tr class="@rowClass">
						<td>@counter</td>
						<td>Media</td>
						<td><a href="@urlBackoffice" target="_blank">@node.Id</a></td>
						<td>@node.Name</td>
						<td>N/A</td>
						<td>@result.ValidToTransfer</td>
						<td>@result.IdPropertyAlias</td>
						<td>@result.IdData</td>
					</tr>
				}

			</tbody>
		</table>
	}
	else
	{
		<i style="color:red;">There is no data available currently.</i>
	}

}

@await Html.PartialAsync(pvFormStoreLegacyData, formInputs)

@section FooterScripts {
	<script type="text/javascript">
		$(document).ready(function () {

			// Setup - add a text input to each footer cell
			$('#umbracodata tfoot th').each(function () {
				var title = $(this).text();
				$(this).html('<input type="text" placeholder="Search ' + title + '" />');
			});

			$('#umbracodata').DataTable({
				"lengthMenu": [[10, 25, 50, - 1], [10, 25, 50, "All"]]
			});

			// Apply the search
			table.columns().every(function () {
				var that = this;

				$('input', this.footer()).on('keyup change',
					function () {
						if (that.search() !== this.value) {
							that
								.search(this.value)
								.draw();
						}
					});
			});

		});
	</script>
}
